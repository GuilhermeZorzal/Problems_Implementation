=-=-=-=-=-=-= C++ =-=-=-=-=-=-=

Bibliotecas importantes: 
<iostream> = semelhante a stdio.h e stdlib.h
<string> = funçoes de string (tamanho, entre outras)

=-=-=-=-=-=-= Linhas gerais =-=-=-=-=-=-=
A estrutura do main, declarações, atribuiçoes, subprogramas, ponteiros, entre outros, são iguais à linguagem C

hex = transforma para hexadecimal
cout << hex << 50; = imprime 50 em hexadecimal

setw(valor) = cria um campo de tamanho valor
cout << setw(10) << 50; faz uma especie de tabulaçao colocando 50 num campo de tamanho 10

using namespace std; //faz com que nao seja necessario usar std:: , basta chamar o que se deseja dentro do std
-=-=-=-=-=-= Input e Output =-=-=-=-=-=-=
Dentro do iostream há um pacote chamado std. Ele que contem as funcoes de input e output. Para acessa-las usa-se :: == std::cout

std::cout == printf()
o que sairá no console é dado por << 
std::cout << "hello world";
Se for usado std::cout << "hello " << "World"; ele printara "Hello World";

Para receber basta usar std::cin >> variavel;
endl = quebra de linha ("\n")

=-=-=-=-=-=-= Strings =-=-=-=-=-=-=
Pode-se criar strings da mesma forma que em C, mas tambem é possivel criar com std::string nome_string = "sdfasfdsa";

Em c++ é possivel somar strings:
MyString = "aba"
MyString += "cate"
(MyString == "abacate")

getline da biblioteca string: recebe até achar um \n
getline(cin,variavel);

=-=-=-=-=-=-= Struct =-=-=-=-=-=-= 
Ìgual ao C. 
Uma diferenca é que é possivel passar alguns parametros pra Struct:

//colocando valores iniciais aos dados:
struct Human{
    //funçao de preenchimento:
    Human(){
        name = "Jose";
        idade = 2;
    }
    std::string;
    int idade;
};

//passando parametros:
struct Human{
    //funçao de preenchimento:
    Human(std::string n){
        name = n;
        idade = 2;
    }
    std::string;
    int idade;
};
//Quando a struct for chamada no main, pode ser chamada como:
    struct Human me("Guilermo");
quando a struct for criada, name receberá Guilermo

